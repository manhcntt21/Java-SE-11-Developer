*********************************
snippet-02-ComparatorExample.java
*********************************


// Use collections class, ArrayList
List<String> namesList = new ArrayList<>(List.of(names));
System.out.println("------ Sorted initial List ------");
namesList.forEach(System.out::println);

// Use static method reverseOrder on Comparator to sort
namesList.sort(Comparator.reverseOrder());
System.out.println("---- List.sort(Comparator.reverseOrder()) ----");
namesList.forEach(System.out::println);

// Use static method naturalOrder on Comparator to sort
namesList.sort(Comparator.naturalOrder());
System.out.println("---- List.sort(Comparator.naturalOrder()) ----");
namesList.forEach(System.out::println);


*********************************
snippet-03-ComparatorExample.java
*********************************


// Create instance of custom Comparator
LastNameComparator l = new LastNameComparator();

// Passing custom Comparator to List.sort
namesList.sort(l);
System.out.println("--- ArrayList.sort(LastNameComparator) ---");
namesList.forEach(System.out::println);

// Passing custom Comparator to Arrays.sort.
Arrays.sort(names, l);
System.out.println("-- Arrays.sort(String[], " +
        "LastNameComparator) --");
namesList.forEach(System.out::println);


*********************************
snippet-04-ComparatorExample.java
*********************************


// Comparator interface has a reversed() default method
namesList.sort(l.reversed());
System.out.println("--- ArrayList.sort(" +
        "LastNameComparator.reversed()) ---");
namesList.forEach(System.out::println);


*********************************
snippet-05-ComparatorExample.java
*********************************


//  Add a null value to the ArrayList
namesList.add(null);
namesList.sort(l);
System.out.println("--- ArrayList.sort(" +
        "LastNameComparator) with null ---");
namesList.forEach(System.out::println);


*********************************
snippet-06-ComparatorExample.java
*********************************


// Comparator interface has static methods which are helpful,
// such as allowing control over where nulls end up in sorted list
// you can list nulls first
namesList.sort(Comparator.nullsFirst(l.reversed()));
System.out.println("--- ArrayList.sort(Comparator." +
        "nullsFirst(reversed))) ---");
namesList.forEach(System.out::println);

// you can list nulls last
namesList.sort(Comparator.nullsLast(l.reversed()));
System.out.println("--- ArrayList.sort(Comparator." +
        "nullsLast(reversed))) ---");
namesList.forEach(System.out::println);


********************************
snippet-01-ComparingExample.java
********************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 4: Generics and Collections
Topic:  Comparator static methods
*/

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

// Person class with firstName & lastName
class Person {
    private String firstName;
    private String lastName;

    // Constructor takes both arguments
    Person(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    // Getters
    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    // toString method
    public String toString() {
        return "Person{" +
                "firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                '}';
    }
}

// Sorting without using either a custom Comparator or a Comparable.
public class ComparingExample {
    public static void main(String[] args) {

        // Creating a list of person.
        List<Person> people = new ArrayList<>(List.of(new Person("George", "Ball"),
                new Person("Cathy", "Hart"),
                new Person("Anne", "Ball"),
                new Person("Marty", "Hart")));

        // sort in a multi-dimensional way, using methods (getters here)
        // chaining the static methods on Comparator
        people.sort(
                Comparator.comparing(Person::getLastName)
                        .thenComparing(
                                Comparator.comparing(Person::getFirstName)));

        people.forEach(System.out::println);
    }
}

