******************************
snippet-06-FirstFinalTest.java
******************************


// The following class is an abstract class which means we MUST subclass it.
// It is incomplete in its current form and cannot be instantiated.
abstract class ExtendMeRequired {

    public abstract void doSomething();

    // A final method in a non-final class cannot be overridden by a
    // subclass
    public final void doSomethingFinally() {
        System.out.println("Overriding ExtendMeRequired.doSomethingFinally " +
                "is not optional");
    }
}


******************************
snippet-07-FirstFinalTest.java
******************************


// Create an instance of our abstract class
// and execute it's methods
ExtendMeRequired objectD = new ExtendMeRequired();
objectD.doSomething();
objectD.doSomethingFinally();



******************************
snippet-08-FirstFinalTest.java
******************************


// The following class is an abstract class which means we MUST subclass it.
// It is incomplete in its current form and cannot be instantiated.
final abstract class ExtendMeRequired {


******************************
snippet-09-FirstFinalTest.java
******************************


class MySecondExtendedClass extends ExtendMeRequired {
    
    // an overridden method can be modified with the final modifier and
    // still considered a valid override.
    public final void doSomething() {
        System.out.println("Implementation of this method was required");
    }
}


******************************
snippet-10-FirstFinalTest.java
******************************


// Create an instance of our class which extends the abstract class
// class and execute it's methods
MySecondExtendedClass objectD = new MySecondExtendedClass();
objectD.doSomething();
objectD.doSomethingFinally();


******************************
snippet-11-FirstFinalTest.java
******************************


final class MySecondExtendedClass extends ExtendMeRequired {