*******************************
snippet-01-MethodReference.java
*******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 7: Stream API
Topic:  Method References
*/

import java.util.Arrays;
import java.util.Random;
import java.util.stream.Stream;

class TestPerson {

    // Private attributes...
    public static String[] namesArray = {"Allen", "Bob", "Caleb", "Don", "Fred",
            "Greg", "Howard", "Ira", "James", "Kevin"};
    private String name;

    // initializer give name at random
    {
        int i = new Random().nextInt(10);
        this.name = namesArray[i];
    }

    public String toString() {
        return this.name + " ";
    }

    public String getName() {
        return this.name;
    }

    // Will use this method in a method reference
    public static void printStatic(String s) {
        System.out.print(s + " ");
    }

    // Will use this method in a method reference
    public void printInstance(String s) {
        System.out.print(s + ", ");
    }
}

public class MethodReference {
    public static void main(String[] args) {

        // Method reference used to print each name
        Arrays.stream(TestPerson.namesArray)
                .forEach(System.out::println);

        System.out.println("------ Four types of Method References ------");
        System.out.println("Static Method on a class: ");
        Arrays.stream(TestPerson.namesArray)
                .forEach(TestPerson::printStatic);

        System.out.println("\nInstance Method on an object: ");
        Arrays.stream(TestPerson.namesArray)
                .forEach(new TestPerson()::printInstance);

        System.out.println("\nInstance Method on an arbitrary object: ");
        // Note that compareToIgnoreCase is not static method
        Arrays.sort(TestPerson.namesArray, String::compareToIgnoreCase);

        System.out.println("\nReference to Constructor: ");
        Stream.generate(TestPerson::new)  // Infinite stream
                .limit(15)                // Limit to 15
                .sorted((s, t) -> s.getName().compareToIgnoreCase(t.getName()))
                .forEach(System.out::print);

    }
}


********************************************
snippet-01-FunctionalInterfaceArguments.java
********************************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 7: Stream API
Topic:  Method References and Lambda Expressions
*/

// Simple Functional Interface
interface MyInterface {

    String doSomething(String s);
}

// Class implements Functional Interface
class MyClass implements MyInterface {

    public String doSomething(String s) {
        return "3.  MyClass " + s;
    }
}

public class FunctionalInterfaceArguments {
    public static void main(String[] args) {

        // Create local variable, assign lambda expression to it
        MyInterface i = (s) -> "1.  variable " + s;

        // Executing operation passing Interface parameter
        executeInterface(i);

        // Executing operation passing lambda expression directly
        executeInterface((s) -> "2.  unnamed " + s);

        // Executing operation passing method reference
        executeInterface(new MyClass()::doSomething);

        // Executing operation passing return value (interface) of
        // another method
        executeInterface(FunctionalInterfaceArguments.returnInterface());
    }

    // Example operation that accepts functional interface as argument
    private static void executeInterface(MyInterface i) {
        System.out.println(i.doSomething("hello"));
    }

    // Returns an interface.
    private static MyInterface returnInterface() {
        MyInterface i = (s) -> "4.  method " + s;
        return i;
    }
}


********************************************
snippet-02-FunctionalInterfaceArguments.java
********************************************


executeInterface(FunctionalInterfaceArguments::returnInterface);

