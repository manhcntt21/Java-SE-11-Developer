*******************************
snippet-01-ResourceExample.java
*******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 2: Exception Handling and Assertions
Topic:  Use try-with-resources construct
*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class ResourceExample {

    // Method demonstrates problems with try/catch/finally clauses.
    private String getPropertyFromFile(String filename,
                                       String propertyName)
            throws IOException {

        String property = null;
        BufferedReader br = null;
        try {
            // if file not found, this line will throw an exception
            // and the variable br will remain null.
            br = new BufferedReader(new FileReader(filename));
            String line;
            String name;
            while ((line = br.readLine()) != null) {
                name = line.split("\\s")[0];
                if (name.equals(propertyName)) {
                    property = line.split("\\s")[1];
                }
            }
        } catch (Exception e) {
            System.out.println("------ Actual Code Throws this error:");
            e.printStackTrace();
            throw e;
        } finally {

            // br is null if file does not exist so following statement
            // generates new error, possibly suppressing original  
            br.close();
        }

        return property;
    }

    public static void main(String[] args) throws IOException {
        ResourceExample rex = new ResourceExample();
        String propertyName = "FIRST";
        try {
            String property = rex.getPropertyFromFile(
                    "properties.txt", propertyName);
            System.out.println("The value of the property " + propertyName +
                    " = " + property);
        } catch (Exception e) {
            System.out.println("------ Surrounding Code Sees this Error:");
            // Printing exception confirms that exception thrown NOT
            // FileNotFoundException but NullPointerException
            e.printStackTrace();
        }
    }
}


*******************************
snippet-02-ResourceExample.java
*******************************


// This method shows the try-with-resources feature
private String getPropertyValueFromFile(String filename,
                                        String propertyName)
        throws IOException {

    String property = null;

    // In the try-with-resources construct, the resource is
    // automatically closed. 
    try (BufferedReader br =
                  new BufferedReader(new FileReader(filename))) {
        String line;
        String name;
        while ((line = br.readLine()) != null) {
            name = line.split("\\s")[0];
            if (name.equals(propertyName)) {
                property = line.split("\\s")[1];
            }
        }
    }
    return property;
}


*******************************
snippet-03-ResourceExample.java
*******************************


try {
    String property = rex.getPropertyValueFromFile(
            "properties.txt", propertyName);
    System.out.println("The value of the property " + propertyName +
            " = " + property);
} 


*************************************
snippet-01-AutoCloseableExamples.java
*************************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 2: Exception Handling and Assertions
Topic:  Use try-with-resources construct
Sub-Topic:  Implementing AutoCloseable
*/

// Make the Door AutoCloseable
class Door implements AutoCloseable {

    // Must Implement close() method, which is invoked in the
    // implicit finally clause of try-with-resources statement
    public void close() {
        System.out.println("Executing close(): The door is closing");
    }
}

// Make the Alarm AutoCloseable
class Alarm implements AutoCloseable {

    // Must Implement close() method, which is invoked in the
    // implicit finally clause of try-with-resources statement
    public void close() {
        System.out.println("Executing close(): The alarm is armed");
    }
}

// Class to test basic try-with-resources statement
public class AutoCloseableExamples {
    public static void main(String[] args) {

        // Very simple example, to confirm that resources are
        // closed in reverse order of their declaration here...
        try (Alarm a = new Alarm();
             Door d = new Door()) {
        }

    }
}


*************************************
snippet-02-AutoCloseableExamples.java
*************************************


// Forcing an Exception to see what happens
public void doSomething() throws NullPointerException {
    throw new NullPointerException(this.getClass().getName() +
            " is null");
}


*************************************
snippet-03-AutoCloseableExamples.java
*************************************


public static void main(String[] args) {

    // Very simple example, to confirm that resources are
    // closed in reverse order of their declaration here...
    try (Alarm a = new Alarm();
          Door d = new Door()) {

        d.doSomething();

    } catch (NullPointerException ne) {
        System.out.println(ne);
    }
    // We can use finally clause with try-with-resources
    finally {
        System.out.println("Resources are closed so I can go.");
    }
}












