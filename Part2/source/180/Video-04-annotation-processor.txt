***********************************
snippet-01-AnnotationProcessor.java
***********************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 17 -Annotations
Topic:  Annotation Processor to Examine Annotations
*/

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import java.util.Set;

// Specify which Annotations this processor processes
@SupportedAnnotationTypes(
        {
                "annotations.MyClassAnnotation",
                "annotations.MySourceAnnotation",
                "annotations.MyRuntimeAnnotation"
        })
@SupportedSourceVersion(SourceVersion.RELEASE_11)

// Annotation processors extend AbstractProcessor
public class AnnotationProcessor extends AbstractProcessor {

    public boolean process(Set<? extends TypeElement> annotations,
                           RoundEnvironment roundEnv) {
        for (TypeElement annotation : annotations) {
            for (Element element : roundEnv.getElementsAnnotatedWith(
                    annotation)) {
                System.out.println(
                        element.getKind() + " " +
                                element.getEnclosingElement() + "." +
                                element + " is annotated with " +
                                annotation);
            }
        }
        // return true if this is the only processor permitted to
        // process the annotations listed in SupportedAnnotationTypes
        return true;
    }
}


*********************************************
snippet-02-annotations.MyClassAnnotation.java
*********************************************


@Retention(RetentionPolicy.CLASS)
@Target(ElementType.FIELD)
public @interface MyClassAnnotation {
}


***********************************************
snippet-02-annotations.MyRuntimeAnnotation.java
***********************************************


@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface MyRuntimeAnnotation {
}


**********************************************
snippet-02-annotations.MySourceAnnotation.java
**********************************************


// Annotation with Source Retention Policy
@Retention(RetentionPolicy.SOURCE)
@Target(ElementType.METHOD)
public @interface MySourceAnnotation {
}


***************************************
snippet-02-TestingAnnotatedClasses.java
***************************************


// Apply annotations to the class
@MyRuntimeAnnotation()
public class TestingAnnotatedClasses {

    @MyClassAnnotation()
    String MyField = "AnnotatedField";

    // reflection methods used to get information about class, methods,
    // fields
    @MySourceAnnotation()
    public void printRuntimeAnnotations() {


***********************************************
snippet-03-annotations.MyRuntimeAnnotation.java
***********************************************


@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface MyRuntimeAnnotation {
    String author();
    double version();
    String description();
}


***********************************************
snippet-04-annotations.MyRuntimeAnnotation.java
***********************************************


// Apply annotations to the class
@MyRuntimeAnnotation(
        author = "Tim",
        version = 1.0,
        description = "This class is used for testing annotations"
)


***********************************************
snippet-05-annotations.MyRuntimeAnnotation.java
***********************************************


@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Documented
public @interface MyRuntimeAnnotation {


