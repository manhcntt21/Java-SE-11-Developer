******************************
snippet-01-LambdaExamples.java
******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 5: Functional Interface and Lambda Expressions
Topic:  Lambda Expression Examples
*/

// Create a very basic functional interface
interface Viewable {
    void view();
}

public class LambdaExamples {

    // Anywhere you declare a variable, you can use a lambda expression
    private static Viewable staticViewable =
            () -> System.out.println("Static Variable Lambda");

    private Viewable instanceViewable =
            () -> System.out.println("Instance Variable Lambda");

    // Method parameter using the interface type
    private static void viewIt(Viewable v) {
        v.view();
    }

    public static void main(String[] args) {

        // local variable assigned a lambda expression
        // (the body enclosed in {})
        Viewable localViewable = () -> {
            System.out.println("Local Variable Lambda");
        };   // Observe the semi-colon.  Do not omit

        // Execution of lambda expressions deferred until
        // these methods are invoked.
        viewIt(localViewable);
        viewIt(staticViewable);
        viewIt(new LambdaExamples().instanceViewable);
    }

}


******************************
snippet-02-LambdaExamples.java
******************************


viewIt(()-> System.out.println("Lambda Expression on the fly"));


******************************
snippet-03-LambdaExamples.java
******************************


for (String s : new String[]{"First", "Second", "Third"}) {
    viewIt(() -> System.out.println("Lambda Expression" +
            " on the fly " + s));
}


******************************
snippet-01-LambdaExample2.java
******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 5: Functional Interface and Lambda Expressions
Topic:  Lambda Expressions
*/

interface Calculable {
    float calculate(float operand1, float operand2);
}

interface Showable {
    void showIt();
}

public class LambdaExample2 {

    private static void executeFirstMethod() {
        System.out.println("First Method executing");
    }

    private static int executeSecondMethod() {
        System.out.println("Second Method executing");
        return 1;
    }

    public static void main(String[] args) {

        // Do not need to declare types of parameters
        Calculable c1 = (op1, op2) -> op1 + op2;

        // Can declare types of all parameters
        Calculable c2 = (float op1, float op2) -> op1 + op2;

        // Can use LVTI var for all parameters
        Calculable c3 = (var op1, var op2) -> op1 + op2;

        // Example of lambda expression in brackets {}
        Calculable c4 = (op1, op2) -> {
            float f1 = op1;
            float f2 = op2;
            return f1 / f2;  // return required..
        };
        // You can return a primitive data wrapper
        Calculable c5 = (var op1, var op2) -> (op1 + op2);

        // Can return a literal that widens to a float
        Calculable c6 = (op1, op2) -> 1;

        // Can return a primitive data wrapper
        Calculable c7 = (op1, op2) -> Float.valueOf("10");

        // Can return a literal
        Calculable c8 = (op1, op2) -> 10.0f;

        // Can return result from a method call...
        Calculable c9 = (op1, op2) -> executeSecondMethod();

        // Void method, any statement will work
        Showable s1 = () -> System.out.println("Doing something");

        // Expanded body, enclosed in {}
        Showable s2 = () -> {
            String s = "Doing something";
            System.out.println(s);
            return;  // This return is ok because method is void
        };

        // You can call a method as long as return type matches
        // abstract method.
        Showable s3 = () -> executeFirstMethod();

        // You can execute a method with return type even with
        // an abstract method that is declared void
        Showable s4 = () -> executeSecondMethod();

        // You can execute use a method reference in place of 
        // lambda expression
        Showable s5 = LambdaExample2::executeSecondMethod;
    }

}


******************************
snippet-02-LambdaExample2.java
******************************


// All the stuff you can not do.....
// Cannot autobox/unbox with parameters in a lambda expression
Calculable d1 = (Float op1, Float op2) -> op1 + op2;

// Cannot mix LVTI var with declared types
Calculable d2 = (var op1, float op2) -> op1 + op2;

// Have to either declare types for all parameters or none
Calculable d3 = (float op1, op2) -> op1 + op2;

// single expresson must evaluate to the return type of method,
// this returns void.
Calculable d4 = (var op1, var op2) -> System.out.println(op1 + op2);

// No return type specified
Calculable d5 = (var op1, var op2) -> {
    float f1 = op1;
    float f2 = op2;
    // return type is required
};

// Wrong amount of parameters
Calculable d6 = (var op1) -> 0;

// Wrong amount of parameters
Calculable d7 = () -> 0;

// Cannot use return statement in single expression, not in brackets {}
Calculable d8 = (op1, op2) -> return op1 / op2;

// Cannot pass constants in the parameter list
Calculable d9 = (1, op2) ->1 / op2;

// Cannot omit parameter section altogether, () required if method
// has no parameters
Showable b1 = ->System.out.println("Do this");

// This expression 'returns a String' but method is void
Showable b2 = () ->  "hello";


******************************
snippet-01-LambdaExample3.java
******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 5: Functional Interface and Lambda Expressions
Topic:  Lambda Expressions
*/

interface Runnable {
    public int run(int a);
}

public class LambdaExample3 {

    // static field
    private static int staticInt = 50;

    // instance field
    private int instanceInt;

    // Constructor
    LambdaExample3(int instanceInt) {
        this.instanceInt = instanceInt;
    }

    public static void main(String[] args) {

        LambdaExample3 lambdaExample =
                new LambdaExample3(100);

        // Lambda Expression uses no outside variables
        Runnable r1 = (a) -> a + 1;
        lambdaExample.doSomething("Example 1", r1, 5);

        // Lambda expression uses static field in expression
        Runnable r2 = (a) -> a + LambdaExample3.staticInt++;
        lambdaExample.doSomething("Example 2", r2, 5);
        lambdaExample.doSomething("Example 3", r2, 5);

        // Lambda expression uses instance field in expression
        Runnable r3 = (a) -> a + lambdaExample.instanceInt++;
        lambdaExample.doSomething("Example 4", r3, 5);
        lambdaExample.doSomething("Example 5", r3, 5);

        int i = 10;
        // Lambda expression uses local variable in expression
        Runnable r4 = (a) -> a + i;
        lambdaExample.doSomething("Example 6", r4, 5);

        int j = 20;
        lambdaExample.doSomething("Example 7", j++);
        lambdaExample.doSomething("Example 8", j++);
    }

    // Executes and prints Runnable.
    private void doSomething(String s, Runnable r, int a) {
        System.out.println(s + " : r.run(a) = " + r.run(a));
    }

    // Runnable created in the method uses parameter value
    // in its lambda expression
    private void doSomething(String s, int b) {
        // Lambda expression uses method parameter of enclosing method
        // in its expression
        Runnable r = (a) -> b + 1;
        doSomething(s, r, 5);
    }
}


******************************
snippet-02-LambdaExample3.java
******************************


int i = 10;
// Lambda expression uses local variable in expression
Runnable r4 = (a) -> a + i++;
lambdaExample.doSomething("Example 6", r4, 5);


******************************
snippet-03-LambdaExample3.java
******************************


  int k = 0;
  Runnable r5 = (k) -> k + 1;


******************************
snippet-04-LambdaExample3.java
******************************


int k = 0;
Runnable r5 = (instanceInt) -> k + 1;
lambdaExample.doSomething("Example 9", r5, j++);

