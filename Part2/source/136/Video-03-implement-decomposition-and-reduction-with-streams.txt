***********************************
snippet-01-ParallelStreamTests.java
***********************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 12:  Parallel Stream
Topic:  Develop the code that uses parallel stream
*/

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ParallelStreamTests {
    public static void main(String[] args) {

        int tests = 10;

        // Local variable to house random list of Integer
        List<Integer> randomIntegerList;

        // Set up some arrays to store results of pipeline operations
        double[] parallelAverages = new double[tests];
        double[] serialAverages = new double[tests];
        int[] parallelFirsts = new int[tests];
        int[] parallelAnys = new int[tests];
        int[] serialFirsts = new int[tests];
        int[] serialAnys = new int[tests];

        randomIntegerList =
                // IntStream of ints,  between 1 and 100,000
                Stream.iterate(1, (t) -> t <= 100000, (t) -> t + 1)
                        // collect into list
                        .collect(Collectors.toList());

        // Test for (predetermined) iterations
        for (int i = 0; i < tests; i++) {

            // average reduction method on intStream in parallel
            OptionalDouble parallelAvg = randomIntegerList
                    .parallelStream()
                    .mapToInt((s) -> s)
                    .skip(1000)
                    .limit(50000)
                    .average();

            parallelAverages[i] = parallelAvg.getAsDouble();

            // average reduction method on intStream in serial
            OptionalDouble serialAvg = randomIntegerList
                    .stream()
                    .mapToInt((s) -> s)
                    .skip(1000)
                    .limit(50000)
                    .average();

            serialAverages[i] = serialAvg.getAsDouble();

            // findAny is nondeterministic
            Optional findAnyParallel = randomIntegerList
                    .parallelStream()
                    .findAny();

            parallelAnys[i] = (Integer) findAnyParallel.get();

            Optional findAnySerial = randomIntegerList
                    .stream()
                    .findAny();

            serialAnys[i] = (Integer) findAnySerial.get();

            // findFirst works the same in parallel or serial
            Optional findFirstParallel = randomIntegerList
                    .parallelStream()
                    .findFirst();

            parallelFirsts[i] = (Integer) findFirstParallel.get();

            Optional findFirstSerial = randomIntegerList
                    .stream()
                    .findFirst();

            serialFirsts[i] = (Integer) findFirstSerial.get();

        }

        System.out.println("------ Parallel Results ------");
        System.out.println("Averages: " + Arrays.toString(parallelAverages));
        System.out.println("First: " + Arrays.toString(parallelFirsts));
        System.out.println("Anys: " + Arrays.toString(parallelAnys));
        System.out.println("------ Serial Results ------");
        System.out.println("Averages: " + Arrays.toString(serialAverages));
        System.out.println("First: " + Arrays.toString(serialFirsts));
        System.out.println("Anys: " + Arrays.toString(serialAnys));
    }
}


*********************************
snippet-01-ParallelReduction.java
*********************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 12:  Parallel Stream
Topic:  Reductions using stream terminal operations, sum, average and reduce
*/

import java.util.stream.Stream;

public class ParallelReduction {

    public static void main(String[] args) {

        // The sum() terminal operation available to an IntStream
        // Serial Stream<Integer> gets mapped to IntStream first.
        long sum = Stream.iterate(0, i -> i <= 10000, i -> i + 1)
                .mapToInt(s -> s)
                .sum();
        System.out.println("serial sum using sum() = " + sum);

        // The average() terminal operation available to an IntStream
        // Serial Stream<Integer> gets mapped to IntStream first.
        double avg = Stream.iterate(0, i -> i <= 10000, i -> i + 1)
                .mapToInt(s -> s)
                .average().getAsDouble();
        System.out.println("serial average using average() = " + avg);

        // Use the reduce() terminal operation on a serial stream
        sum = Stream.iterate(0, i -> i <= 10000, i -> i + 1)
                .reduce(0, Integer::sum);
        System.out.println("serial sum using method reference" +
                "(Integer::sum) as accumulator = " + sum);

        // Use the reduce() terminal operation on a parallel stream
        sum = Stream.iterate(0, i -> i <= 10000, i -> i + 1)
                .parallel()
                // single args reduce method, accumulator
                .reduce(Integer::sum).get();
        System.out.println("parallel sum using method reference" +
                "(Integer::sum) as accumulator = " + sum);

        // The average() terminal operation available to an IntStream
        // Stream<Integer> to parallel Stream gets mapped to IntStream .
        avg = Stream.iterate(0, i -> i <= 10000, i -> i + 1)
                .parallel()
                .mapToInt(s -> s)
                .average().getAsDouble();
        System.out.println("parallel average using average() = " + avg);

        // Use the reduce terminal operation on a parallel stream
        sum = Stream.iterate(0, i -> i <= 10000, i -> i + 1)
                .parallel()
                // two args reduce method, identifier, accumulator
                .reduce(0, (s1, s2) -> s1 + s2);
        System.out.println("parallel sum using lambda expression " +
                "((s1, s2) -> s1 + s2) as accumulator = " + sum);

        // Use the reduce terminal operation on a parallel stream
        sum = Stream.iterate(0, i -> i <= 10000, i -> i + 1)
                .parallel()
                // three args reduce method
                .reduce(0, (s1, s2) -> s1 + s2, (s1, s2) -> s1 + s2);
        System.out.println("parallel sum using lambda expression " +
                "((s1, s2) -> s1 + s2) as accumulator\n\t" +
                "and ((s1,s2) -> s1 + s2) as combiner= " + sum);

    }
}


*********************************
snippet-02-ParallelReduction.java
*********************************


// Use the reduce terminal operation on a parallel stream
sum = Stream.iterate(0, i -> i <= 10000, i -> i + 1)
        .parallel()
        // three args reduce method
        .reduce(0, (s1, s2) -> s1 + s2, (s1, s2) -> s1);
System.out.println("parallel sum using lambda expression " +
        "((s1, s2) -> s1 + s2) as accumulator\n\t" +
        "and ((s1,s2) -> s1) as combiner= " + sum);


*********************************
snippet-03-ParallelReduction.java
*********************************


// Use the reduce terminal operation on a parallel stream
sum = Stream.iterate(0, i -> i <= 10000, i -> i + 1)
        //.parallel()
        // three args reduce method
        .reduce(0, (s1, s2) -> s1 + s2, (s1, s2) -> s1);
System.out.println("parallel sum using lambda expression " +
        "((s1, s2) -> s1 + s2) as accumulator\n\t" +
        "and ((s1,s2) -> s1) as combiner= " + sum);


