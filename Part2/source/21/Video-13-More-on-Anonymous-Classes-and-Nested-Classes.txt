


*************************************
snippet-02-AnonymousInnerExample.java
*************************************


abstract class AnAbstractClass {
    int i;
}


*************************************
snippet-03-AnonymousInnerExample.java
*************************************


protected abstract void doSomething();


*************************************
snippet-04-AnonymousInnerExample.java
*************************************


  // Anonymous class extending Object 
  Object b = new Object() {
      public String toString() {
          return "Anonymous object";
      }
  };

  System.out.println(b);


*************************************
snippet-05-AnonymousInnerExample.java
*************************************


  // Anonymous class implements interface Doable
  new Doable() {
      public void doSomething() {
          System.out.println("Anonymous Doable " +
                  "will doSomething with " + b);
      }
  }.doSomething();


*************************************
snippet-06-AnonymousInnerExample.java
*************************************


// If you want to pass parameters to your anonymous
// class, you can extend abstract class using a local
// class
abstract class ConcreteClass extends AnAbstractClass {
    ConcreteClass(int i) {
        this.i = i;
    }
}

// This example shows an anonymous class created with an
// instance initializer and passing a value to the constructor
AnAbstractClass c = new ConcreteClass(5) {
    {
        i = 2 * this.i;
    }

    public void doSomething() {
        System.out.println("Anonymous AnAbstractClass " +
                "will doSomething with " + i);
    }
};
c.doSomething();


**************************************
snippet-01-AnonymousSecondExample.java
**************************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 1: Java Fundamentals
Topic : Anonymous Classes
*/

public class AnonymousSecondExample {

    // You can define a private interface in your class
    private interface Summable {
        double getTotal(float[] data);
    }

    // A pass through method to invoke getTotal method on an object 
    // that implements Summable interface
    public static void invokeSummable(Summable summable,
                                      float[] data) {
        System.out.println("Total = " + String.format("%.2f",
                summable.getTotal(data)));
    }

    public static void main(String[] args) {

        // Note that we are passing an anonymous class expression as a 
        // parameter to the invokeSummable method .
        invokeSummable(
                new Summable() {  // Begin anonymous class expression

                    // implement Summable.getTotal(float[]) method
                    public double getTotal(float[] values) {
                        double total = 0.0;
                        for (float value : values) total += value;
                        return total;
                    } // end of getTotal method

                }  // End of anonymous class expression
                , new float[]{12.4f, 13.4f, 5f, 12.0f, 11f, 7.5f}
        );  // End of method invocation
    }
}











