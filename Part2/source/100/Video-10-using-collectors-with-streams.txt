*****************************
snippet-01-StreamCollect.java
*****************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 8: Lambda Operations on Stream
Topic: Using Collector
*/

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class StreamCollect {
    public static void main(String[] args) {

        // Create a List which will be used as source of stream pipelines
        List<String> originalList =
                new ArrayList<>(List.of("First", "Second", "Third"));

        // Using stream to add 'ish' to all elements,creating another list
        List<String> firstList = originalList.stream().map((s) -> s + "ish")
                .collect(Collectors.toList());

        // Add another element to list returned from collect
        firstList.add("Fourthish");

        // Print both lists
        System.out.println("originalList = " + originalList);
        System.out.println("firstList = " + firstList);
    }
}


*****************************
snippet-02-StreamCollect.java
*****************************


System.out.println("---- .collect(Collectors.joining) examples ----");
// Joins with no delimiters
String joinedExample1 = originalList.stream()
        .collect(Collectors.joining());

// Joins Strings delimited by a comma
String joinedExample2 = originalList.stream()
        .collect(Collectors.joining(", "));

// Joins Strings delimited by a comma, prefixed/suffixed with 
// beginning/ending bracket
String joinedExample3 = originalList.stream()
        .collect(Collectors.joining(", ", "List [", "]"));

System.out.println("Collectors.joining - with no parameters: " +
        joinedExample1);
System.out.println("Collectors.joining - with delimiter : " +
        joinedExample2);
System.out.println("Collectors.joining - with delimiter," +
        " prefix and suffix : " + joinedExample3);


*****************************
snippet-03-StreamCollect.java
*****************************


// Student class
class Student {
    private float gpa;
    protected String name;

    // Constructor
    Student(String name, float gpa) {
        this.name = name;
        this.gpa = gpa;
    }

    public String toString() {
        return this.name + "[" + this.gpa + "]";
    }

    public float getGpa() {
        return this.gpa;
    }
}


*****************************
snippet-04-StreamCollect.java
*****************************


        System.out.println("---- .collect(Collectors.averaging) examples ----");
        // Create random list of numbers

        double average = new Random().ints(1, 100_000)
                // Limit to 1000 random numbers
                .limit(1000)
                .boxed() // transform to an Integer stream
                .collect(Collectors.averagingInt((s) -> s));

        System.out.println("average of random integers = " + average);

        double AverageGPA = Stream.of(new Student("Jeff", 2.7f),
                new Student("Carol", 3.5f),
                new Student("Andy", 1.7f))
                .collect(Collectors.averagingDouble(Student::getGpa));

        System.out.println(String.format("Average GPA = %.2f",
                AverageGPA));


*****************************
snippet-05-StreamCollect.java
*****************************


System.out.println("---- .collect(" +
        "Collectors.summarizing examples ----");
// Get Summary Statistics from an IntStream
IntSummaryStatistics firstStats = new Random().ints(1, 100_000)
        .limit(1000)
        .summaryStatistics();

System.out.println(firstStats);

// Get Summary Statistics from a Stream<Integer>
IntSummaryStatistics secondStats = new Random().ints(1, 100_000)
        .limit(1000)
        .boxed()
        .collect(Collectors.summarizingInt((s) -> s));

System.out.println(secondStats);

// Get Summary Statistics (about the gpa) from a Stream<Student>
DoubleSummaryStatistics gpaStats = Stream.of(new Student("Jeff", 2.7f),
        new Student("Carol", 3.5f),
        new Student("Andy", 1.7f))
        .collect(Collectors.summarizingDouble(Student::getGpa));

System.out.println(gpaStats);


***************************
snippet-01-element.Pet.java
***************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 8: Lambda Operations on Stream
Topic: Stream Grouping
*/
package element;

import java.util.Random;

// This class will support creating a self-constructed Pet object
// with randomly selected attributes from different arrays
public class Pet {

    // Set up test data for grouping tests
    private String[] namesArray = {"Spot", "Bob", "Barkley",
            "Charlie", "Fluffy", "Boots", "Angel", "Mittens"};

    private String[] statesArray =
            {"AL", "CO", "DE", "PA", "FL", "GA", "NJ", "NY"};

    private String[] typesArray = {"Dog", "Cat", "Hamster", "Fish",
            "Chinchilla", "Ferret", "Gerbil", "Pig"};

    private String[] ownerArray = {"Allen", "Bob", "Caleb", "Don",
            "Greg", "Howard", "Ira", "James"};

    private String[] vetArray = {"Bucks", "Pipersville", "Newtown",
            "New Hope", "Chalfont", "Ambler", "Lambertville", "Dublin"};

    private String name;
    private String type;
    private String owner;
    private String vet;
    private String state;
    private int age;

    public Pet() {
        // Use streaming skills to get 6 random #'s between 0 & 7
        int[] randoms = new Random().ints(0, 8)
                .limit(6)
                .toArray();

        // Populate Pet with randomly selected data
        int i = 0;
        this.name = namesArray[randoms[i++]];
        this.type = typesArray[randoms[i++]];
        this.state = statesArray[randoms[i++]];
        this.owner = ownerArray[randoms[i++]];
        this.vet = vetArray[randoms[i++]];
        this.age = randoms[i++];
    }

    public String getName() {
        return name;
    }

    public String getType() {
        return type;
    }

    public String getOwner() {
        return owner;
    }

    public String getVet() {
        return vet;
    }

    public String getState() {
        return state;
    }

    public int getAge() {
        return age;
    }

    public String toString() {
        return "Pet{" +
                "name='" + name + '\'' +
                ", type='" + type + '\'' +
                ", owner='" + owner + '\'' +
                ", vet='" + vet + '\'' +
                ", state='" + state + '\'' +
                ", age=" + age +
                '}';
    }
}


******************************
snippet-01-StreamGrouping.java
******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 8: Lambda Operations on Stream
Topic: Stream Grouping
*/

import element.Pet;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamGrouping {
    public static void main(String[] args) {

        // Print one Pet object
        System.out.println(new Pet());

        // Create a randomly generated list of 5000 pets.
        List<Pet> petPopulation = Stream.generate(Pet::new)
                .limit(5000)
                .collect(Collectors.toList());

        // Count the number of Dogs
        System.out.println("Number of Dogs = " +
                petPopulation.stream()
                        .filter((s) -> s.getType() == "Dog")
                        .count());

    }
}


