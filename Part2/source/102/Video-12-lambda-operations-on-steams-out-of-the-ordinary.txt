***************************
snippet-01-element.Pet.java
***************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 8: Lambda Operations on Stream
Topic: Stream Grouping
*/
package element;

import java.util.Random;

// This class will support creating a self-constructed Pet object
// with randomly selected attributes from different arrays
public class Pet {

    // Set up test data for grouping tests
    private String[] namesArray = {"Spot", "Bob", "Barkley",
            "Charlie", "Fluffy", "Boots", "Angel", "Mittens"};

    private String[] statesArray =
            {"AL", "CO", "DE", "PA", "FL", "GA", "NJ", "NY"};

    private String[] typesArray = {"Dog", "Cat", "Hamster", "Fish",
            "Chinchilla", "Ferret", "Gerbil", "Pig"};

    private String[] ownerArray = {"Allen", "Bob", "Caleb", "Don",
            "Greg", "Howard", "Ira", "James"};

    private String[] vetArray = {"Bucks", "Pipersville", "Newtown",
            "New Hope", "Chalfont", "Ambler", "Lambertville", "Dublin"};

    private String name;
    private String type;
    private String owner;
    private String vet;
    private String state;
    private int age;

    public Pet() {
        // Use streaming skills to get 6 random #'s between 0 & 7
        int[] randoms = new Random().ints(0, 8)
                .limit(6)
                .toArray();

        // Populate Pet with randomly selected data
        int i = 0;
        this.name = namesArray[randoms[i++]];
        this.type = typesArray[randoms[i++]];
        this.state = statesArray[randoms[i++]];
        this.owner = ownerArray[randoms[i++]];
        this.vet = vetArray[randoms[i++]];
        this.age = randoms[i++];
    }

    public String getName() {
        return name;
    }

    public String getType() {
        return type;
    }

    public String getOwner() {
        return owner;
    }

    public String getVet() {
        return vet;
    }

    public String getState() {
        return state;
    }

    public int getAge() {
        return age;
    }

    public String toString() {
        return "Pet{" +
                "name='" + name + '\'' +
                ", type='" + type + '\'' +
                ", owner='" + owner + '\'' +
                ", vet='" + vet + '\'' +
                ", state='" + state + '\'' +
                ", age=" + age +
                '}';
    }

}


***************************
snippet-02-element.Pet.java
***************************


public String toString() {
    return "Pet{" +
            "type='" + type + '\'' +
            ", name='" + name + '\'' +
            ", owner='" + owner + '\'' +
            ", age=" + age +
            '}';
}


****************************
snippet-01-StreamExtras.java
****************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 8: Lambda Operations on Stream
Topic: additional Collectors.toMap and Collectors.groupingBy
*/

import element.Pet;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamExtras {
    public static void main(String[] args) {
        List<Pet> petPopulation = Stream.generate(Pet::new)
                .limit(5)
                .collect(Collectors.toList());

        petPopulation.forEach(System.out::println);

    }
}


****************************
snippet-02-StreamExtras.java
****************************


List<Pet> petPopulation = Stream.generate(Pet::new)
        .distinct()
        .limit(5)
        .collect(Collectors.toList());


***************************
snippet-03-element.Pet.java
***************************


public boolean equals(Object o) {
    if (this == o) return true;
    if (!(o instanceof Pet)) return false;
    Pet pet = (Pet) o;
    return getType().equals(pet.getType());
}

public int hashCode() {
    return Objects.hash(getType());
}


****************************
snippet-03-StreamExtras.java
****************************


System.out.println("--- Group by Pet using groupingBy ---");
// Take list of Pet, collect into a Map using groupingBy
// chain to stream of Entry and print key,values.
petPopulation.stream()
        .collect(
                // groupingBy with a single argument
                Collectors.groupingBy(Pet::getType))
        .entrySet()
        .stream()
        .forEach(System.out::println);

System.out.println("--- Group by Pet using toMap ---");
// Take list of Pet, collect into a Map using toMap
// chain to stream of Entry and print key,values.
petPopulation.stream()
        .collect(
                // toMap requires at least 2 arguments
                Collectors.toMap(Pet::getType, p -> p))
        .entrySet()
        .stream()
        .forEach(System.out::println);


****************************
snippet-04-StreamExtras.java
****************************


List<Pet> petPopulation = Stream.generate(Pet::new)
        .limit(5)
        .collect(Collectors.toList());


***************************
snippet-04-element.Pet.java
***************************


public boolean equals(Object o) {
    if (this == o) return true;
    if (!(o instanceof Pet)) return false;
    Pet pet = (Pet) o;
    return getName().equals(pet.getName()) &&
            getType().equals(pet.getType());
}


****************************
snippet-05-StreamExtras.java
****************************


petPopulation.stream()
        .distinct()
        .collect(
                // toMap requires at least 2 arguments
                Collectors.toMap(
                        p -> p.getType() + "_" + p.getName(),
                        p -> p))
        .entrySet()
        .stream()
        .forEach(System.out::println);


