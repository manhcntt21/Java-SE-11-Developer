*****************************
snippet-01-StreamsSorted.java
*****************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 8: Lambda Operations on Stream
Topic: Sorting Streams
*/

import java.util.HashSet;
import java.util.List;
import java.util.Set;

class Guest {
    protected String first;
    protected String last;

    // Constructor
    Guest(String first, String last) {
        this.first = first;
        this.last = last;
    }

    public String toString() {
        return this.last + ", " + this.first;
    }
}

public class StreamsSorted {

    public static void main(String[] args) {

        // Test data
        List<String> initialData = List.<String>of("One", "Two", "Three",
                "Four", "Five", "Six", "Abc");

        // HashSet is unordered
        Set<String> unOrderedSet = new HashSet<String>(initialData);

        System.out.println("---- UnOrdered Stream ");
        // Stream<Stream> created, Print each element
        initialData.stream()
                // print each element
                .forEach((s) -> System.out.print(s + " "));

        System.out.println("\n---- Using sorted operation on Stream");
        initialData.stream()
                // Uses Natural Order, alphabetical
                .sorted()
                // print each element
                .forEach((s) -> System.out.print(s + " "));

    }
}


*****************************
snippet-02-StreamsSorted.java
*****************************


System.out.println("\n---- Using sorted with Stream of Guest");

Stream.of(new Guest("Ann", "Jones"),
        new Guest("Bob", "Smith"),
        new Guest("Carol", "Green"))
        .sorted()
        .forEach(System.out::println);


*****************************
snippet-03-StreamsSorted.java
*****************************


Stream.of(new Guest("Ann", "Jones"),
        new Guest("Bob", "Smith"),
        new Guest("Carol", "Green"))
        .sorted(Comparator.naturalOrder())
        .forEach(System.out::println);


*****************************
snippet-04-StreamsSorted.java
*****************************


Stream.of(new Guest("Ann", "Jones"),
        new Guest("Bob", "Smith"),
        new Guest("Carol", "Green"))
        .sorted((s, t) -> s.last.compareToIgnoreCase(t.last))
        .forEach(System.out::println);


*****************************
snippet-05-StreamsSorted.java
*****************************


class Guest implements Comparable<Guest> {


*****************************
snippet-06-StreamsSorted.java
*****************************


public int compareTo(Guest o) {
    return last.compareToIgnoreCase(o.last);
}


*****************************
snippet-07-StreamsSorted.java
*****************************


Stream.of(new Guest("Ann", "Jones"),
        new Guest("Bob", "Smith"),
        new Guest("Carol", "Green"))
        .sorted()
        .forEach(System.out::println);


*****************************
snippet-08-StreamsSorted.java
*****************************


Stream.of(new Guest("Ann", "Jones"),
        new Guest("Bob", "Smith"),
        new Guest("Carol", "Green"))
        .sorted(Comparator.reverseOrder())
        .forEach(System.out::println);


*****************************
snippet-09-StreamsSorted.java
*****************************


Stream.of(new Guest("Ann", "Jones"),
        new Guest("Bob", "Smith"),
        new Guest("Carol", "Green"))
        .sorted(Comparator::reverseOrder)
        .forEach(System.out::println);


*****************************
snippet-10-StreamsSorted.java
*****************************


public static int sortByFirst(Guest g1, Guest g2) {
    return g1.first.compareToIgnoreCase(g2.first);
}


*****************************
snippet-11-StreamsSorted.java
*****************************


Stream.of(new Guest("Ann", "Jones"),
        new Guest("Bob", "Smith"),
        new Guest("Carol", "Green"))
        .sorted(Guest::sortByFirst)
        .forEach((s) -> System.out.println(s.first + " " + s.last));


*****************************
snippet-12-StreamsSorted.java
*****************************


System.out.println("\n---- Stream with multiple sorts/peeks");
initialData.stream()
        // Pass a Comparator that sorts by length of String value
        .sorted((s, t) -> s.length() - t.length())
        .peek((s) -> System.out.println(s + " "))
        // Uses Natural Order, alphabetical, same as sorted() with
        // no argument
        .sorted(Comparator.naturalOrder())
        .forEach((s) -> System.out.print(s + " "));

