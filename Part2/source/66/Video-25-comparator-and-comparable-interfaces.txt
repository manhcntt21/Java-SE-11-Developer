*********************************
snippet-01-ComparableExample.java
*********************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 4: Generics and Collections
Topic:  Comparable interface
*/

import java.util.Set;
import java.util.TreeSet;

// Class orders dogs by how smart they are claimed to be
class SmartDog implements Comparable<SmartDog> {

    // dogType determines smart Factor
    private DogType dogType;

    // Constructor takes a dog type
    public SmartDog(DogType t) {
        this.dogType = t;
    }

    // Overrides Comparable compareTo method with custom implementation
    public int compareTo(SmartDog o) {
        System.out.println("Comparing " + this + " with argument " + o +
                " = " + (this.dogType.smartLevel - o.dogType.smartLevel));
        return this.dogType.smartLevel - o.dogType.smartLevel;
    }

    public String toString() {
        return this.dogType.toString();
    }

    // Enum represents how smart dogs are from 1 to 6, 6 being the dumbest
    public enum DogType {
        POODLE(1),
        LABRADOODLE(2),
        COLLIE(3),
        LABRADOR(4),
        PUG(5);

        // default dogs to dumbest level
        int smartLevel = 6;

        DogType(int smartLevel) {
            this.smartLevel = smartLevel;
        }

    }

}

// Class tests which dogs are the smartest
public class ComparableExample {
    public static void main(String[] args) {
        System.out.println("-----TreeSet start constructing -------");
        Set<SmartDog> dogSet = new TreeSet<>(
                Set.of(
                        new SmartDog(SmartDog.DogType.COLLIE),
                        new SmartDog(SmartDog.DogType.LABRADOODLE),
                        new SmartDog(SmartDog.DogType.PUG),
                        new SmartDog(SmartDog.DogType.POODLE),
                        new SmartDog(SmartDog.DogType.LABRADOR))
        );

        System.out.println("-----TreeSet constructed-------");
        System.out.println("Sorted Dogs " + dogSet);
    }
}


*********************************
snippet-01-ComparatorExample.java
*********************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 4: Generics and Collections
Topic:  Comparator interface
*/

import java.util.Arrays;
import java.util.Comparator;

// Create a comparator to sort names using last names
class LastNameComparator implements Comparator<String> {

    // Do not want natural order, want to sort by the last name if one
    // exists. Assume no titles and suffixes in the names
    public int compare(String o1, String o2) {
        // Deal with nulls
        if (o1 == null || o2 == null) return -1;

        // Split names on whitespace
        String[] names1 = o1.split("\\s");
        String[] names2 = o2.split("\\s");

        // Assumption is last String is the last name, leverage
        // compareTo method of String which implements Comparable
        return names1[names1.length - 1].compareTo(names2[names2.length - 1]);
    }
}

public class ComparatorExample {
    public static void main(String[] args) {

        // Create an array of different names to test the compare method
        String[] names = {
                "Ralph Smith",
                "Martha G. Jones",
                "Anne Margaret Caroline Green",
                "Owen White",
                "Irene Funk",
                "Philip",
                "Joe Ford"};
       
        System.out.println("------ Unsorted initial List ------");
        for (String name : names) {
            System.out.println(name);
        }
        
        // Uses natural order... Strings implement Comparable
        Arrays.sort(names);
        System.out.println("------ Arrays.sort(String[]) ------");

        for (String name : names) {
            System.out.println(name);
        }
    }
}


