********************************
snippet-01-EffectivelyFinal.java
********************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 1: Java Fundamentals 
Topic:  Nested Class, local Class, effectively final review
*/

// Simple class demonstrating a local class in a method
public class EffectivelyFinal {

    public static void main(String[] args) {

        // Create a local variable and assign it a value
        int efinal = 1;

        // Local Class created with a single method that
        // uses the efinal local variable just created
        class LocalClass {
            public void printValue() {
                System.out.println("efinal = " + efinal);
            }
        }

        // Execute method on the local class
        new LocalClass().printValue();
    }
}


********************************
snippet-02-EffectivelyFinal.java
********************************


// Ceate a local variable and assign it a value
final int efinal = 1;


********************************
snippet-03-EffectivelyFinal.java
********************************


// Create a local variable and assign it a value
int efinal = 1;
efinal++;


********************************
snippet-04-EffectivelyFinal.java
********************************


// Execute method on the local class
new LocalClass().printValue();
efinal++;


********************************
snippet-05-EffectivelyFinal.java
********************************


class LocalClass {
    public void printValue() {
        System.out.println("efinal = " +  efinal++);
    }
}


**************************
snippet-01-EnumExtras.java
**************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 1: Java Fundamentals 
Topic:  Enum Extras
*/
enum PrimaryColor {
    RED, BLUE, YELLOW;
}

public class EnumExtras {
    public static void main(String[] args) {
        for (PrimaryColor color : PrimaryColor.values()) {
            System.out.println(color);
        }
    }
}


**************************
snippet-02-EnumExtras.java
**************************


enum PrimaryColor {
    RED(1) {
        {
            // initializer for the individual class constants
            System.out.println(this + " initialized");
        }
    },
    BLUE(2) {

        {
            // initializer for the individual class constants
            System.out.println(this + " initialized");
        }
    },
    YELLOW(3) {
        {
            // initializer for the individual class constants
            System.out.println(this + " initialized");
        }
    };

    int rating = 0;

    // static initializer for the PrimaryColor class (enum)
    static {
        System.out.println("Enum Class Initialization");
    }

    // initializer for all of the anonymous class constants
    {
        System.out.println("Enum Body Initialization for " + this);
    }

    // Constructor
    PrimaryColor(int rating) {
        System.out.println("Primary Color constructor for " + this);
        this.rating = rating;
    }
 }


**************************
snippet-03-EnumExtras.java
**************************


public static void main(String[] args) {

    System.out.println(PrimaryColor.RED);
    System.out.println(PrimaryColor.BLUE);
    System.out.println(PrimaryColor.YELLOW);
}


*********************************
snippet-01-TestEnumInterface.java
*********************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 1: Java Fundamentals 
Topic:  Enum implementing interface
*/

//  create an interface with a single method
interface DoItInterface {
    public void doIt();
}

// Declare an enum that implements an interface
enum SecondaryColors implements DoItInterface {
    ORANGE,
    PURPLE {
        // You can implement interface method in the enum constant body
        public void doIt() {
            System.out.println(this + " wants to be different");
        }
    },
    GREEN;

    // You can implement interface method in the enum body
    public void doIt() {
        System.out.println(this + " is implementing an interface's method ");
    }
}

public class TestEnumInterface {

    // This method accepts an interface typed parameter
    public void printData(DoItInterface o) {
        o.doIt();
    }

    public static void main(String[] args) {
        TestEnumInterface e = new TestEnumInterface();

        // You can pass enum constants to a method that takes the
        // interface typed parameter
        e.printData(SecondaryColors.ORANGE);
        e.printData(SecondaryColors.PURPLE);
    }
}


*********************************
snippet-02-TestEnumInterface.java
*********************************


ORANGE {
    // If doIt is abstract or NOT declared at all in the enum body
    // each constant must implement the method
    public void doIt() {
        System.out.println(this + " is implementing an interface's method ");
    }
},
PURPLE {
    // You can implement interface method in the enum constant body
    public void doIt() {
        System.out.println(this + " wants to be different");
    }
},
GREEN {
    // If doIt is abstract or NOT declared at all in the enum body
    // each constant must implement the method
    public void doIt() {
        System.out.println(this + " is implementing an interface's method ");
    }
};



