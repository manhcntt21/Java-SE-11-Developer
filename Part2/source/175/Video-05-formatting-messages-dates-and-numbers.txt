************************************
snippet-01-LocaleFormattingText.java
************************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 16: Localization
Topic:  Formatting
*/

import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;

public class LocaleFormattingText {
    public static void main(String[] args) {

        Date now = new Date();

        Locale.setDefault(new Locale("en", "AU"));

        Locale.setDefault(Locale.US);

        float floatValue = 10.233f;
        Locale[] locales = {new Locale("en", "AU"),
                Locale.FRANCE, Locale.US, Locale.ITALY};

        for (Locale l : locales) {
            System.out.println("----------- " + l + "---------------");
            Locale.setDefault(l);

            // Retrieve text using a resource bundle,
            // based on Locale.getDefault();
            String someText = ResourceBundle.getBundle("firstBundle")
                    .getString("unsure");

            // Printing using a concatenated String
            System.out.println("NOT LOCALIZED : " + someText + " : " + floatValue
                    + ": " + now);

            // Localize each element:
            System.out.println("LOCALIZE ELEMENTS : " + someText +
                    " : " + DecimalFormat.getInstance().format(floatValue) + " : " +
                    SimpleDateFormat.getDateInstance().format(now));

            // Printing using format, where %s is for a String variable
            // and %f is for a float
            System.out.format("LOCALIZED 1 :  %s : %f : %tF %n",
                    someText, floatValue, now);

            // Printing using String.format with format specifiers and args
            System.out.println(String.format(
                    "LOCALIZED 2 : %2$s : %1$.2f : %3$tA %3$tB %3$td, %3$tC",
                    floatValue, someText, now));

            // Printing using String returned from MessageFormat.format
            System.out.println(MessageFormat.format(
                    "LOCALIZED 3 : {0} : {1} : {2}",
                    someText, floatValue, now));

            // Printing using String returned from MessageFormat.format
            // Using more specific format specifiers
            System.out.println(MessageFormat.format(
                    "LOCALIZED 4 : {0} : {1, number, currency}" +
                            " : {2, date, short}",
                    someText, floatValue, now));
            new Date();
        }
    }
}


***************************************
snippet-01-LocaleFormattingNumbers.java
***************************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 16: Localization
Topic:  Formatting Numbers
*/

import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;

public class LocaleFormattingNumbers {
    public static void main(String[] args) throws ParseException {

        Locale.setDefault(new Locale("en", "AU"));
        System.out.println("----------- STANDARD FORMATS ------------");
        testNumberFormats(Locale.FRANCE);
    }

    public static void testNumberFormats(Locale l) {
        double d = 10.55;

        String outpattern = "{0}({1}) : {3}  -  {0}({2}) : {4} ";

        // Using getInstance() with and without passing a Locale
        System.out.println(MessageFormat.format(outpattern,
                "getInstance.format",   // {0} - Text, method executed
                Locale.getDefault(),    // {1} - default Locale String
                l,                      // {2} - passed Locale String
                NumberFormat.getInstance().format(d), // {3} number (default Locale)
                NumberFormat.getInstance(l).format(d) // {4} number (passed Locale)
        ));

        // Using getNumberInstance() with and without passing a Locale, 
        // same result as using getInstance()
        System.out.println(MessageFormat.format(outpattern,
                "getNumberInstance",
                Locale.getDefault(),
                l,
                NumberFormat.getNumberInstance().format(d),
                NumberFormat.getNumberInstance(l).format(d)
        ));

        // Using getCurrencyInstance() with and without passing a Locale
        System.out.println(MessageFormat.format(outpattern,
                "getCurrencyInstance",
                Locale.getDefault(),
                l,
                NumberFormat.getCurrencyInstance().format(d),
                NumberFormat.getCurrencyInstance(l).format(d)));

        // Using getIntegerInstance() with and without passing a Locale
        System.out.println(MessageFormat.format(outpattern,
                "getIntegerInstance",
                Locale.getDefault(),
                l,
                NumberFormat.getIntegerInstance().format(d),
                NumberFormat.getIntegerInstance(l).format(d)));

        // Using getPercentInstance() with and without passing a Locale
        System.out.println(MessageFormat.format(outpattern,
                "getPercentInstance",
                Locale.getDefault(),
                l,
                NumberFormat.getPercentInstance().format(d),
                NumberFormat.getPercentInstance(l).format(d)));

    }
}


***************************************
snippet-02-LocaleFormattingNumbers.java
***************************************


// Parsing Numbers has to be Locale specific as well
public static void parseNumbers(Locale l) throws ParseException {
    double d = 10.55;

    // First get two String representations of the double value above
    // defaultDecimal String is the default Locale's representation
    String defaultDecimal = NumberFormat.getInstance().format(d);

    // localeDecimal String is the passed Locale's representation
    String localeDecimal = NumberFormat.getInstance(l).format(d);

    System.out.println("defaultDecimal = " + defaultDecimal);
    System.out.println("localeDecimal = " + localeDecimal);

    // Now let's use MessageFormat to print variations out
    String message = "NumberFormat.getInstance({0}).parse({1}) : {2}";

    // Parse the defaultDecimal String for the default Locale
    System.out.println(MessageFormat.format(message,
            Locale.getDefault(), // {0} - default Locale's String value
            "defaultDecimal", // {1} - specify Locale used
            NumberFormat.getInstance().parse(defaultDecimal) // {2} result
    ));

    // Parse the defaultDecimal String for the Locale passed as an arg
    System.out.println(MessageFormat.format(message,
            l,
            "defaultDecimal",
            NumberFormat.getInstance(l).parse(defaultDecimal)
    ));

    // Parse the localeDecimal String for the default Locale
    System.out.println(MessageFormat.format(message,
            Locale.getDefault(),
            "localeDecimal",
            NumberFormat.getInstance().parse(localeDecimal)
    ));

    // Parse the localeDecimal String for the Locale passed as an arg
    System.out.println(MessageFormat.format(message,
            l,
            "localeDecimal",
            NumberFormat.getInstance(l).parse(localeDecimal)
    ));

}


***************************************
snippet-03-LocaleFormattingNumbers.java
***************************************


System.out.println("----------- PARSING ---------------");
parseNumbers(Locale.FRANCE);


***************************************
snippet-04-LocaleFormattingNumbers.java
***************************************


// Formatting Numbers using patterns
public static void testCustomNumberFormats(Locale l) {
    double d = 5.5;

    // Get a Regional DecimalFormat. apply pattern as a method
    DecimalFormat dfRegional = (DecimalFormat) NumberFormat.getInstance(l);
    dfRegional.applyPattern("###.###");

    System.out.println(MessageFormat.format("{0}({1}) : {2} ",
            "DecimalFormat(\"###.###\")", l, dfRegional.format(d)));

    // Construct DecimalFormat with a pattern
    System.out.println(MessageFormat.format("{0}({1}) : {2} ",
            "DecimalFormat(\"##.00\")", l, new DecimalFormat("##.00").format(d)));

    // Using MessageFormat format specifier with various numeric
    // options.  MessageFormat does not take a Locale, uses the default Localse

    // Prints out a number passed with no additional formatting
    System.out.println(MessageFormat.format("{0}({1}) : {2, number} ",
            "{2, number} ", l, d));

    // Prints out number passed as a percentage
    // (multiplies by 100 and shows percent character)
    System.out.println(MessageFormat.format("{0}({1}) : {2, number, percent} ",
            "{2, number, percent}  ", l, d));

    // Prints out number passed as currency
    // with Locale specific currency character
    System.out.println(MessageFormat.format("{0}({1}) : {2, number, currency} ",
            "{2, number, currency} ", l, d));

    // Prints out number passed as an integer, rounding
    System.out.println(MessageFormat.format("{0}({1}) : {2, number, integer} ",
            "{2, number, integer} ", l, d));

    // Prints out number passed using the pattern specified, # and 0 are
    // specific pattern designators.
    // Both # and 0 limit digits on right side of decimal but 0 right-pads
    // number with 0
    System.out.println(MessageFormat.format("{0}({1}) : {2, number, #.00} ",
            "{2, number, #.00} ", l, d));

    // Prints out number passed using the pattern specified, # and 0 are
    // specific pattern designators.
    // Both # and 0 limit digits on left side of decimal but 0 left-pads number
    // with 0
    System.out.println(MessageFormat.format("{0}({1}) : {2, number, 00.##} ",
            "{2, number, 00.##} ", l, d));
}


***************************************
snippet-05-LocaleFormattingNumbers.java
***************************************


System.out.println("----------- CUSTOM FORMATS --------------");
testCustomNumberFormats(Locale.getDefault());


****************************************
snippet-01-LocaleFormattingDateTime.java
****************************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 16: Localization
Topic:  Formatting Date Time
*/

import java.text.MessageFormat;
import java.util.Date;
import java.util.Locale;

public class LocaleFormattingDateTime {

    public static void main(String[] args) {
        Locale.setDefault(new Locale("en", "AU"));

        // Create a date representing current date/time
        Date date = new Date();
        System.out.println("Date.toString() = " + date);

        // Use method to print date/time in different ways
        printDateMessageFormat(date);
    }

    // MessageFormat uses the default Locale
    public static void printDateMessageFormat(Date date) {
        System.out.println("----- Using Date Patterns ---------");

        // Printing this way prints the short representation of a date
        System.out.println(MessageFormat.format("{0}  = " +
                "{1, date}", "1, date", date));

        // Printing this way prints the short representation of a date,
        // same as above but making it clear that this is short
        System.out.println(MessageFormat.format("{0}  = " +
                "{1, date, short}", "1, date, short", date));

        // Printing this way prints the medium representation of a date
        System.out.println(MessageFormat.format("{0}  = " +
                "{1, date, medium}", "1, date, medium", date));

        // Printing this way prints the long representation of a date
        System.out.println(MessageFormat.format("{0}  =" +
                " {1, date, long}", "1, date, long", date));

        // Printing this way prints the full representation of a date
        System.out.println(MessageFormat.format("{0}  =" +
                " {1, date, full}", "1, date, full", date));

        // Using patterns with date
        System.out.println(MessageFormat.format("{0}  = " +
                        "{1, date, yyy-MMM-ddd}",
                "1, date, yyy-MMM-ddd", date));

        System.out.println(MessageFormat.format("{0}  = " +
                        "{1, date, MMM d, y}",
                "1, date, MMM d y", date));

        System.out.println(MessageFormat.format("{0}  = " +
                        "{1, date, (EE) - 'Day' u 'of week' W MMMM }",
                "1, date, (EE) - 'Day' u 'of week' W MMMM", date));

        // Using patterns with time
        System.out.println("----- Using Time Patterns ---------");

        // Printing this way prints the short representation of time
        System.out.println(MessageFormat.format("{0}  = " +
                "{1, time}", "1, time", date));

        // Printing this way prints the short representation of time,
        // but is more clear that it is doing so...
        System.out.println(MessageFormat.format("{0}  = " +
                "{1, time, short}", "1, time, short", date));

        // Printing this way prints the medium representation of time
        System.out.println(MessageFormat.format("{0}  = " +
                "{1, time, medium}", "1, time, medium", date));

        // Printing this way prints the long representation of time
        System.out.println(MessageFormat.format("{0}  = " +
                "{1, time, long}", "1, time, long", date));

        // Printing this way prints the full representation of time
        System.out.println(MessageFormat.format("{0}  = " +
                "{1, time, full}", "1, time, full", date));

        // Printing this way prints the time using a specified pattern
        System.out.println(MessageFormat.format("{0}  = " +
                "{1, time, h:mm a}", "1, time, h:mm a", date));
    }
}


