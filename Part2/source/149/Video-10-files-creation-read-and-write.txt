*******************************
snippet-01-FilesManagement.java
*******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 13:  I/O (Fundamentals and NIO2)
Topic: Using Files to create, read from, write to, and delete files.
*/

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.List;

public class FilesManagement {
    public static void main(String[] args) {

        // Create a path to a file in current working directory;
        // This file was created in example above
        Path testFile = Path.of("TestingFile.txt");
        try {
            // Use Files.readAllLines to open a file, read all lines
            // and close the file.
            System.out.println("Read each line of a file");
            List<String> fileLines = Files.readAllLines(testFile);
            fileLines.forEach(System.out::println);

            // Use Files.readAllBytes to open a file, read all data
            // and close the file.
            System.out.println("Read entire file into byte array");
            byte[] byteArray = Files.readAllBytes(testFile);
            System.out.println(new String(byteArray));

            // Use first line of previous file to create a new file
            Path byteFile = Path.of(fileLines.get(0).split("\\s")[1] + ".txt");

            System.out.println("Creating " + byteFile);
            // Write bytes to this file, creating a new file each time.

            try {
                // Exception occurs if file already exists
                Files.write(byteFile, "Secret sauce".getBytes(),
                        StandardOpenOption.CREATE_NEW);
            } catch (IOException e) {
                System.out.println(e);
                Files.write(byteFile, "Secret sauce".getBytes(),
                        StandardOpenOption.CREATE);

            }

            Path byteFile2 = Path.of(fileLines.get(1).split("\\s")[1] + ".txt");

            System.out.println("Creating " + byteFile2);
            // Write bytes to file, truncating data in file if it exists
            Files.write(byteFile2, "Extra secret sauce\n".getBytes(),
                    StandardOpenOption.CREATE,
                    StandardOpenOption.TRUNCATE_EXISTING);

            // Write a String to file, appending it
            Files.writeString(byteFile2, "Secret Ingredient One\n",
                    StandardOpenOption.APPEND);

            System.out.println("Deleting " + byteFile2);
            Files.writeString(byteFile2, "Secret Ingredient Two\n",
                    StandardOpenOption.DELETE_ON_CLOSE);

        } catch (IOException io) {
            System.out.println(io);
        }
    }
}


*******************************
snippet-02-FilesManagement.java
*******************************


System.out.println("Appending to " + byteFile2);
Files.writeString(byteFile2, "Secret Ingredient Two\n",
        StandardOpenOption.APPEND);


*******************************
snippet-03-FilesManagement.java
*******************************


// Write bytes to file, leaving data intact if file exists
Files.write(byteFile2, "Extra secret stuff\n".getBytes(),
        StandardOpenOption.CREATE);


*******************************
snippet-04-FilesManagement.java
*******************************


System.out.println("Creating " + byteFile2);
// Write bytes to file, leaving data intact if file exists
Files.write(byteFile2, "Extra secret stuff\n".getBytes(),
        StandardOpenOption.CREATE, StandardOpenOption.APPEND);


*******************************
snippet-05-FilesManagement.java
*******************************


// Write a String to file, but do not append it
Files.writeString(byteFile2, "Secret Ingredient OneTwoThree\n",
        StandardOpenOption.WRITE);


******************************
snippet-01-FilesIOStreams.java
******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 13:  I/O (Fundamentals and NIO2)
Topic: Using Files and I/O streams
*/

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;

public class FilesIOStreams {
    public static void main(String[] args) {
        Path testFile = Path.of("TestingFile.txt");
        readingAFile(testFile);
    }

    private static void readingAFile(Path testFile) {
        String line = null;

        // Pre - JDK 7 Method of reading a file...
        System.out.println("-- Pre - JDK 7 Method of reading a file--");
        String fileName = testFile.toString();

        // Use BufferedReader to use readLine operation
        try (BufferedReader inStream =
                     new BufferedReader(new FileReader(fileName))) {

            while ((line = inStream.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException io) {
            System.out.println(io);
        }

        System.out.println("-- Files.newInputStream passed to a " +
                "BufferedReader --");
        // Hybrid - Get an InputStream passing Path to 
        // Files.newInputStream 
        try (InputStream in = Files.newInputStream(testFile);
             // Use BufferedReader to leverage readLine operation
             BufferedReader reader = new BufferedReader(
                     new InputStreamReader(in))) {

            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException io) {
            System.out.println(io);
        }

        // Using Files.newBufferedReader
        System.out.println("-- Files.newBufferedReader --");
        // Get a BufferedReader directly from Files class 
        // passing Path instance
        try (BufferedReader reader = Files.newBufferedReader(testFile)) {

            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException io) {
            System.out.println(io);
        }
    }
}


******************************
snippet-02-FilesIOStreams.java
******************************


// Three Examples of writing to a file using output streams,
// BufferedWriter
private static void writingAFile(Path testFile) throws IOException {
    String line = "Hello Janet";

    // Pre - JDK 7 Method of writing data to  a file...
    System.out.println("-- Pre - JDK 7 Method of writing a file--");
    String fileName = testFile.toString();
    try (BufferedWriter writer =
                  new BufferedWriter(new FileWriter(fileName))) {
        writer.write(line);
        writer.newLine();
    } catch (IOException io) {
        System.err.println(io);
    }
    Files.readAllLines(testFile)
            .forEach((s) -> System.out.println("\t" + s));

    // Hybrid - Files.newOutputStream in a BufferedOutputStream
    System.out.println("-- Files.newOutputStream passed to a " +
            "BufferedOutputStream --");

    byte data[] = line.getBytes();
    try (OutputStream out = new BufferedOutputStream(
            Files.newOutputStream(testFile, StandardOpenOption.CREATE))) {
        out.write(data, 0, data.length);
    } catch (IOException io) {
        System.err.println(io);
    }
    Files.readAllLines(testFile)
            .forEach((s) -> System.out.println("\t" + s));

    // Using Files.newBufferedWriter
    System.out.println("-- Files.newBufferedWriter --");
    try (BufferedWriter out = Files.newBufferedWriter(testFile)) {
        out.write(line);
        out.newLine();
    } catch (IOException io) {
        System.out.println(io);
    }
    Files.readAllLines(testFile)
            .forEach((s) -> System.out.println("\t" + s));
}


******************************
snippet-03-FilesIOStreams.java
******************************


try {
    Path newFile = Path.of("NewFile.txt");
    writingAFile(newFile);
} catch (IOException e) {
    System.out.println(e);
}


