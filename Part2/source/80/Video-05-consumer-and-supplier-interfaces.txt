*******************************
snippet-01-ConsumerExample.java
*******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 6: Built-in Functional Interfaces
Topic:  Consumer Interface Example
*/

import java.util.List;
import java.util.function.Consumer;

public class ConsumerExample {
    public static void main(String[] args) {
        // Consumer variable assigned a lambda expression which
        // simply prints out String passed to it
        Consumer<String> c = (s) -> System.out.println("This is " + s);

        // Consumer variable assigned a lambda expression which uses
        // the local variable c of type Consumer.
        Consumer<List<String>> cb = (t) -> t.forEach(c);

        System.out.print("Consumer.accept(\"Testing Consumer Accept\") = ");
        // Consumer return type is void...
        c.accept("Testing Consumer Accept");

        // Print the heading
        System.out.println("Consumer.accept(One,Ten,Twelve,Three,Four) = ");
        // Execute accept on List<String> - prints each element using
        // local variable Consumer c.
        cb.accept(List.of("One", "Ten", "Twelve", "Three", "Four"));

    }
}


*******************************
snippet-02-ConsumerExample.java
*******************************


// BiConsumer variable has two arguments, List and Consumer ...
BiConsumer<List<String>, Consumer<String>> bi = (s, t) -> s.forEach(t);

// Print the heading
System.out.println("BiConsumer.accept(One,Ten,Twelve,Three,Four) = ");
// Execute accept on a List<String> using a Consumer (a lambda expression)
bi.accept(List.of("One", "Ten", "Twelve", "Three", "Four"),
        (s) -> System.out.println("\tCounting... " + s));


*******************************
snippet-03-ConsumerExample.java
*******************************


// Create a second BiConsumer variable to demonstrate andThen...
BiConsumer<List<String>, Consumer<String>> biConsumerAndThen =
        (s, t) -> s.forEach(System.out::print);

// Executing andThen on it's own does nothing
System.out.println("\n--- Executing just BiConsumer.andThen ---");
bi.andThen(biConsumerAndThen);


*******************************
snippet-04-ConsumerExample.java
*******************************


bi.accept(
        List.of("One", "Ten", "Twelve", "Three", "Four"),
        (s) -> System.out.println("\t" + s));


*******************************
snippet-05-ConsumerExample.java
*******************************


System.out.println("\n--- Executing just BiConsumer.andThen ---");
bi = bi.andThen(biConsumerAndThen);


*******************************
snippet-06-ConsumerExample.java
*******************************


// Executing andThen() method on it's own does nothing, must
// be chained to the accept() method.
System.out.println("\n--- Executing BiConsumer.andThen(" +
        "biConsumerAndThen).accept ---");
bi.andThen(biConsumerAndThen).accept(
        List.of("One", "Ten", "Twelve", "Three", "Four"),
        (s) -> System.out.println("\t" + s));


*******************************
snippet-01-SupplierExample.java
*******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 6: Built-in Functional Interfaces
Topic:  Supplier Interface Example
*/

import java.util.ArrayList;
import java.util.List;
import java.util.function.Supplier;

public class SupplierExample {
    public static void main(String[] args) {
        // Set a local variable to a default String
        String s;
        if (args != null && args.length > 0) s = args[0];
        else s = "This that and the other and so forth";

        // Create the Supplier local variable with lambda Expression that
        // calls private method and uses local variable
        Supplier<List<String>> supplier = () -> getData(s);

        // Count # of words user entered or words in String default
        System.out.println("# of words entered = " + supplier.get().size());
    }

    // Private method splits String into words, returns as list
    private static List<String> getData(String s) {
        return new ArrayList<String>(List.of(s.split("\\s")));

    }
}


