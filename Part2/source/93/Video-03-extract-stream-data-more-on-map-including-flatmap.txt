***************************
snippet-04-MapExamples.java
***************************


// Using an IntStream
System.out.println("Output from an IntStream using map");
IntStream.iterate(5, (t) -> t + 5)
        .limit(5)
        .map((s) -> s * 1000)
        .forEach((s) -> System.out.print(s + " "));

// Using a Stream<Integer>
System.out.println("\nOutput from an Stream using mapToInt");
Stream.<Integer>iterate(5, (t) -> t + 5)
        .limit(5)
        .mapToInt((s) -> s * 1000)
        .forEach((s) -> System.out.print(s + " "));


***************************
snippet-05-MapExamples.java
***************************


IntStream.iterate(5, (t) -> t + 5)
        .limit(5)
        .mapToInt((s) -> s * 1000)
        .forEach((s) -> System.out.print(s + " "));


***************************
snippet-06-MapExamples.java
***************************


Stream.<Integer>iterate(5, (t) -> t + 5)
        .limit(5)
        .mapToInt((s) -> s * 1000)
        .map((s) -> s / 1000)
        .forEach((s) -> System.out.print(s + " "));


***************************
snippet-07-MapExamples.java
***************************


Stream.<Integer>iterate(5, (t) -> t + 5)
        .limit(5)
        .mapToInt((s) -> s * 1000)
        .map((s) -> s / 1000)
        .mapToInt((s) -> s * 1000)
        .forEach((s) -> System.out.print(s + " "));


******************************
snippet-01-element.Course.java
******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 8: Lambda Operations on Stream
Topic: Element to be used in sample streams
*/

package element;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

// Class Course will represent a parent, child relationship
public class Course {

    // Course has a name and some students
    private String courseName;
    private List<Student> studentList;

    // Constructor takes course name and a number which will
    // generate that number of randomly named students.
    public Course(String courseName, int studentNumber) {
        this.courseName = courseName;
        // Creating a studentList using generate
        this.studentList =
                Stream.generate(Student::new)
                        // Limiting to the number passed as argument
                        .limit(studentNumber)
                        // Adding course name to student name using map
                        .map((s) -> {
                            s.setName(s.getName() + " : " + courseName);
                            return s;
                        })
                        // returns stream as List<Student>
                        .collect(Collectors.toList());
    }

    public List<Student> getStudentList() {
        return studentList;
    }

    // toString method shows course name and students
    public String toString() {
        return "Course{" +
                "courseName='" + courseName + '\'' +
                ",studentList=" + studentList +
                '}';
    }
}


******************************
snippet-01-FlatMapExample.java
******************************


/*
The Learn Programming Academy
Java SE 11 Developer 1Z0-819 OCP Course - Part 2
Section 8: Lambda Operations on Stream
Topic:  Extract stream data using map, peek and flatMap
*/

import element.Course;
import element.Student;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class FlatMapExample {
    public static void main(String[] args) {

        // Local Variable studentList will contain results
        List<Student> studentList = Stream.of(
                // Stream of courses created
                new Course("Geometry 101", 3),
                new Course("Java 101", 5),
                new Course("History 101", 4))
                // Map from course object to a stream of student objects
                .flatMap(course ->
                        course.getStudentList().stream()
                )
                // Terminal operation returns list of student
                .collect(Collectors.toList());

        // Print the entire student list for all courses
        System.out.println("Complete Student Population: ");
        studentList.forEach(System.out::println);
    }
}


******************************
snippet-02-FlatMapExample.java
******************************


List<Student> studentList = Stream.of(
        // Stream of courses created
        new Course("Geometry 101", 3),
        new Course("Java 101", 5),
        new Course("History 101", 4))
        .peek(System.out::println)
        // Map from course object to a stream of student objects
        .flatMap(course ->
                course.getStudentList().stream()
        )
        // Terminal operation returns list of student
        .collect(Collectors.toList());

